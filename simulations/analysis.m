%% Analysis of repeated experiments

% Let's look at the various statistical indicators
% The different experiments are used to define mean rends and the error bounds


%% Prepare env
clear; close all; clc;

% Load the data generated by simulate.m, with various Hill's coefficients
n2 = load('multiple_exps_ct_wn_n2'); % n=2
n3=  load('multiple_exps_ct_wn_n3'); % n=3
n4 = load('multiple_exps_ct_wn_n4'); % n=4
n5 = load('multiple_exps_ct_wn_n5'); % n=5
n8 = load('multiple_exps_ct_wn_n8'); % n=8

p_critical = [1.788,1.737,1.62,1.524,1.344]; 

% parameter values
val2 = [];   % Keep the same distance to critical values
for m =1:length(p_critical)
    val2 = p_critical(m)+0.35:-0.005:p_critical(m)+0.15;     % Max Production (control parameter)  
end
val2 = val2';


%% Analysis
% Just repeat the statistics calculation for every n (manually change enne (ln29) and n* (ln30))
enne = 8;
en.sol=n8.sol(5000:end,1:end,1:end);


% Var
variance_matrix = reshape( var(en.sol,1), size(en.sol,2), size(en.sol,3) );  % over various experiments
mean_variance = mean(variance_matrix,2);
std_variance = std(variance_matrix');

% AC
AC_matrix = zeros(size(en.sol,2),size(en.sol,3));
for n=1:size(en.sol,3)
    for m=1:size(en.sol,2)
            coeff = corrcoef(en.sol(2:end,m,n) , en.sol(1:end-1,m,n));
            AC_matrix(m,n) = abs(coeff(1,2));
    end
end
mean_AC = mean(AC_matrix,2);
std_AC = std(AC_matrix');


% Coefficient Variation
mean_matrix = reshape( mean(en.sol,1), size(en.sol,2), size(en.sol,3) );
mean_mean = mean(mean_matrix')';
std_mean = std(mean_matrix');
mean_CV = sqrt(mean_variance)./mean_mean;
std_CV = sqrt( (std_mean./(2*sqrt(mean_variance').*mean_mean' )).^2 + (sqrt(mean_variance').*std_mean./(mean_mean'.^2)).^2); % error propagation

p_value_matrix1 = zeros(size(variance_matrix,1)-1,1);  % comparison with no change at all: very far from transition -> variance_matrix(2,:)
for n=2:size(variance_matrix,1)-1
            [h, pv] = ttest(variance_matrix(n+1,:) , variance_matrix(2,:));
            p_value_matrix1(n) = abs(pv);
end

p_value_matrixAC = zeros(size(AC_matrix,1)-1,1);  % comparison with no change at all: very far from transition -> variance_matrix(2,:)
for n=2:size(AC_matrix,1)-1
            [h, pv] = ttest(AC_matrix(n+1,:) , AC_matrix(2,:));
            p_value_matrixAC(n) = abs(pv);
end


% save everything as a structure, to pass to plotting etc.
statistics.mean_var = mean_variance;
statistics.std_var = std_variance; 
statistics.mean_AC =  mean_AC;
statistics.std_AC = std_AC; 
statistics.mean_CV = mean_CV; 
statistics.std_CV = std_CV; 
statistics.val2 = val2; 
statistics.p_value = p_value_matrix1'; 
statistics.p_valueAC = p_value_matrixAC';

save(['statistics', num2str(enne) ,'.mat'],'statistics', '-v7.3')

distr_var_far.variance_matrix = variance_matrix(2,:);
distr_var_far.ac_matrix = AC_matrix(2,:);
save(['distr_var_far', num2str(enne) ,'.mat'],'distr_var_far', '-v7.3')

%% Checking p-value thresholds
% Look at the lead time for the mean, then determine how many single false
% positives and negatives I'd get when considering single trajectories

p_value_thresholds = [0.01, 0.05, 0.1];

p_value_matrix1 = zeros(size(variance_matrix,1)-1,1);  % comparison with no change at all: very far from transition -> variance_matrix(2,:)
for n=2:size(variance_matrix,1)-1
            [h, pv] = ttest(variance_matrix(n+1,:) , variance_matrix(2,:));
            p_value_matrix1(n) = abs(pv);
end

p_value_matrix2 = zeros(size(variance_matrix,1)-1,1);  % comparison with no change at all: very far from transition -> variance_matrix(2,:)
for n=2:size(variance_matrix,1)-1
            [h, pv] = ttest(variance_matrix(n+1,:) , variance_matrix(20,:));
            p_value_matrix2(n) = abs(pv);
end
p_value_matrix2 = p_value_matrix2(20:end);

%% A quick plot 
% just to show the idea to group meeting; to be refined

cc0 = flip(0.15:0.005:0.35);
stop=26;

figure()
hold on
plot(cc0(1:stop),mean_variance(1:stop),'k',linewidth=1.2)
plot(cc0(1:stop),mean_variance(1:stop)+std_variance(1:stop)','--k',linewidth=0.8)
ylabel('Variance',fontsize=16,Interpreter='latex')
xlabel('$c-c_0$',fontsize=16,Interpreter='latex')
legend({'Var','+std'},FontSize=14,Location='northeast')

%%
figure()
hold on
plot(cc0(1:stop),(p_value_matrix1(1:stop)))
ylabel('p-value',fontsize=16,Interpreter='latex')
xlabel('$c-c_0$',fontsize=16,Interpreter='latex')
yline(p_value_thresholds(1),'--')
yline(p_value_thresholds(2),'-.')
yline(p_value_thresholds(3),'--')
